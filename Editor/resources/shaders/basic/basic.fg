#version 460 core

in vec3 fragWorldPos;
in vec3 fragNormal;
in vec2 fragTexCoord;

uniform vec3 uCameraWorldPosition;

uniform vec3 uLigthPos;
uniform vec3 uLigthColor;
uniform vec3 uAmbientColor;

uniform vec3 uDiffuseColor;
uniform float uShininess;

out vec4 oColor;

float DotClamped(vec3 a, vec3 b)
{
    return max(0.0, dot(a, b));
}

vec3 Phong ( vec3 L, vec3 V, vec3 N)
{
    vec3 albedo = uDiffuseColor;

    //Calcolo diffuse
	float LN = dot(L, N);
	float dotH = pow(LN * 0.5 + 0.5, 2.0);
    
    vec3 diffuse = albedo * uLigthColor * dotH;

    //Calcolo specular
	vec3 R = normalize(V + L);
    float NDotH = DotClamped(N, R);
    
	float spec = ((LN>0.f)?1.f:0.f) * max(0.0, pow(NDotH, uShininess * 100));
    vec3 specular = uLigthColor * spec;
    
    //Calcolo ambient
    vec3 ambient = albedo*uAmbientColor/10;

    return diffuse + specular + ambient;
}

void main(void)
{	
    vec3 viewDir = normalize(fragWorldPos);
    vec3 ligthDir = normalize(uLigthPos - fragWorldPos);
    vec3 normal = normalize(fragNormal);

    oColor = vec4(Phong(ligthDir, -viewDir, normal), 1);
    //oColor = vec4(fragViewPos, 1);
	//oColor = vec4(gl_FragCoord.z, 0.0f, 0.0f, 1.0f);
}