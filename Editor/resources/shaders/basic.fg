#version 460 core

in vec3 fragWorldPos;
in vec3 fragNormal;
in vec2 fragTexCoord;

uniform vec3 uCameraWorldPos;

uniform vec3 uLigthPos;
uniform vec3 uLigthColor;
uniform vec3 uAmbientColor;

uniform vec3 uBaseColor;
uniform float uSmoothness;

out vec4 oColor;

float DotClamped(vec3 a, vec3 b)
{
    return max(0.0, dot(a, b));
}

void main(void)
{	
    vec3 viewDir = normalize(uCameraWorldPos - fragWorldPos);
    vec3 ligthDir = normalize(uLigthPos - fragWorldPos);
    vec3 normal = normalize(fragNormal);

    vec3 albedo = uBaseColor; //Eventualmente uBaseColor * texture2D(uTexture, ...);

    //Calcolo diffuse
    float dotH = dot(ligthDir, normal);
    dotH = pow(dotH * 0.5 + 0.5, 2.0);

    vec3 diffuse = albedo * uLigthColor * dotH;

    //Calcolo specular
    vec3 halfVector = reflect(-ligthDir, normal);
    vec3 specular = uLigthColor * pow(DotClamped(halfVector, normal), uSmoothness * 100);

    //Calcolo ambient
    vec3 ambient = albedo*uAmbientColor/10;

    oColor = vec4(diffuse + specular + ambient, 1);
	//oColor = vec4(gl_FragCoord.z, 0.0f, 0.0f, 1.0f);
}